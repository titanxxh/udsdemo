// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subpub.proto

package subpub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Header struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Generation           int32    `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	From                 int32    `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	To                   int32    `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_299edc39f83d5d40, []int{0}
}

func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Header) GetGeneration() int32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *Header) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Header) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

type ClientMessage struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PayloadType          int32    `protobuf:"varint,2,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_299edc39f83d5d40, []int{1}
}

func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage.Unmarshal(m, b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
}
func (m *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(m, src)
}
func (m *ClientMessage) XXX_Size() int {
	return xxx_messageInfo_ClientMessage.Size(m)
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

func (m *ClientMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ClientMessage) GetPayloadType() int32 {
	if m != nil {
		return m.PayloadType
	}
	return 0
}

func (m *ClientMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ServerMessage struct {
	Header               *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PayloadType          int32    `protobuf:"varint,2,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMessage) Reset()         { *m = ServerMessage{} }
func (m *ServerMessage) String() string { return proto.CompactTextString(m) }
func (*ServerMessage) ProtoMessage()    {}
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_299edc39f83d5d40, []int{2}
}

func (m *ServerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMessage.Unmarshal(m, b)
}
func (m *ServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMessage.Marshal(b, m, deterministic)
}
func (m *ServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMessage.Merge(m, src)
}
func (m *ServerMessage) XXX_Size() int {
	return xxx_messageInfo_ServerMessage.Size(m)
}
func (m *ServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMessage proto.InternalMessageInfo

func (m *ServerMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ServerMessage) GetPayloadType() int32 {
	if m != nil {
		return m.PayloadType
	}
	return 0
}

func (m *ServerMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "subpub.Header")
	proto.RegisterType((*ClientMessage)(nil), "subpub.ClientMessage")
	proto.RegisterType((*ServerMessage)(nil), "subpub.ServerMessage")
}

func init() { proto.RegisterFile("subpub.proto", fileDescriptor_299edc39f83d5d40) }

var fileDescriptor_299edc39f83d5d40 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xb1, 0x4b, 0xc3, 0x40,
	0x18, 0xc5, 0xbd, 0x98, 0x9e, 0xf8, 0xb5, 0x76, 0xf8, 0x40, 0x08, 0x0e, 0x52, 0x33, 0x48, 0xa6,
	0x52, 0xea, 0xa2, 0x6e, 0xd2, 0x41, 0x17, 0x51, 0x52, 0xc1, 0x45, 0x90, 0x8b, 0xf9, 0x4c, 0x02,
	0x69, 0x2e, 0x5c, 0xbe, 0x08, 0xf9, 0xcf, 0x1d, 0x25, 0xd7, 0xab, 0xd8, 0x31, 0x8b, 0xdb, 0xbd,
	0xf7, 0x78, 0xf7, 0x7b, 0x1c, 0x07, 0x93, 0xa6, 0x4d, 0xea, 0x36, 0x99, 0xd7, 0x46, 0xb3, 0x46,
	0xb9, 0x55, 0xe1, 0x1b, 0xc8, 0x07, 0x52, 0x29, 0x19, 0x9c, 0x82, 0x57, 0xa4, 0x81, 0x98, 0x89,
	0xc8, 0x8f, 0xbd, 0x22, 0xc5, 0x73, 0x80, 0x8c, 0x2a, 0x32, 0x8a, 0x0b, 0x5d, 0x05, 0xde, 0x4c,
	0x44, 0xa3, 0xf8, 0x8f, 0x83, 0x08, 0xfe, 0xa7, 0xd1, 0x9b, 0xe0, 0xd0, 0x26, 0xf6, 0xdc, 0xdf,
	0xc1, 0x3a, 0xf0, 0xad, 0xe3, 0xb1, 0x0e, 0x19, 0x4e, 0x56, 0x65, 0x41, 0x15, 0x3f, 0x52, 0xd3,
	0xa8, 0x8c, 0xf0, 0x12, 0x64, 0x6e, 0x71, 0x16, 0x34, 0x5e, 0x4e, 0xe7, 0x6e, 0xd5, 0x76, 0x44,
	0xec, 0x52, 0xbc, 0x80, 0x49, 0xad, 0xba, 0x52, 0xab, 0xf4, 0x9d, 0xbb, 0x9a, 0x1c, 0x7e, 0xec,
	0xbc, 0x97, 0xae, 0x26, 0x0c, 0xe0, 0xc8, 0x49, 0x3b, 0x61, 0x12, 0xef, 0x64, 0x4f, 0x5d, 0x93,
	0xf9, 0x22, 0xf3, 0x9f, 0xd4, 0xe5, 0xb7, 0x80, 0xe3, 0x35, 0x1b, 0x52, 0x9b, 0xa2, 0xca, 0xf0,
	0x1a, 0xe4, 0x3d, 0xf1, 0x53, 0x45, 0x78, 0xba, 0x83, 0xed, 0xbd, 0xc4, 0xd9, 0xaf, 0xbd, 0x37,
	0x35, 0x3c, 0xc0, 0x1b, 0x18, 0xbd, 0x2a, 0xfe, 0xc8, 0x87, 0x16, 0x17, 0x02, 0x6f, 0x41, 0x3e,
	0xb7, 0x7c, 0x57, 0x96, 0x43, 0xbb, 0x51, 0xdf, 0xf5, 0x57, 0xb9, 0xe2, 0xe1, 0xcd, 0x85, 0x48,
	0xa4, 0xfd, 0x53, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x39, 0x19, 0x9f, 0x63, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamingClient is the client API for Streaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingClient interface {
	// A simple RPC.
	GetOne(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ServerMessage, error)
	// A server-to-client streaming RPC.
	Watch(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (Streaming_WatchClient, error)
	// A client-to-server streaming RPC.
	PutAll(ctx context.Context, opts ...grpc.CallOption) (Streaming_PutAllClient, error)
	// A Bidirectional streaming RPC.
	Chat(ctx context.Context, opts ...grpc.CallOption) (Streaming_ChatClient, error)
}

type streamingClient struct {
	cc *grpc.ClientConn
}

func NewStreamingClient(cc *grpc.ClientConn) StreamingClient {
	return &streamingClient{cc}
}

func (c *streamingClient) GetOne(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ServerMessage, error) {
	out := new(ServerMessage)
	err := c.cc.Invoke(ctx, "/subpub.Streaming/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingClient) Watch(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (Streaming_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streaming_serviceDesc.Streams[0], "/subpub.Streaming/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_WatchClient interface {
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type streamingWatchClient struct {
	grpc.ClientStream
}

func (x *streamingWatchClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) PutAll(ctx context.Context, opts ...grpc.CallOption) (Streaming_PutAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streaming_serviceDesc.Streams[1], "/subpub.Streaming/PutAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingPutAllClient{stream}
	return x, nil
}

type Streaming_PutAllClient interface {
	Send(*ClientMessage) error
	CloseAndRecv() (*ServerMessage, error)
	grpc.ClientStream
}

type streamingPutAllClient struct {
	grpc.ClientStream
}

func (x *streamingPutAllClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingPutAllClient) CloseAndRecv() (*ServerMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Streaming_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streaming_serviceDesc.Streams[2], "/subpub.Streaming/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingChatClient{stream}
	return x, nil
}

type Streaming_ChatClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type streamingChatClient struct {
	grpc.ClientStream
}

func (x *streamingChatClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingChatClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServer is the server API for Streaming service.
type StreamingServer interface {
	// A simple RPC.
	GetOne(context.Context, *ClientMessage) (*ServerMessage, error)
	// A server-to-client streaming RPC.
	Watch(*ClientMessage, Streaming_WatchServer) error
	// A client-to-server streaming RPC.
	PutAll(Streaming_PutAllServer) error
	// A Bidirectional streaming RPC.
	Chat(Streaming_ChatServer) error
}

func RegisterStreamingServer(s *grpc.Server, srv StreamingServer) {
	s.RegisterService(&_Streaming_serviceDesc, srv)
}

func _Streaming_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subpub.Streaming/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServer).GetOne(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streaming_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).Watch(m, &streamingWatchServer{stream})
}

type Streaming_WatchServer interface {
	Send(*ServerMessage) error
	grpc.ServerStream
}

type streamingWatchServer struct {
	grpc.ServerStream
}

func (x *streamingWatchServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Streaming_PutAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServer).PutAll(&streamingPutAllServer{stream})
}

type Streaming_PutAllServer interface {
	SendAndClose(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type streamingPutAllServer struct {
	grpc.ServerStream
}

func (x *streamingPutAllServer) SendAndClose(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingPutAllServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Streaming_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServer).Chat(&streamingChatServer{stream})
}

type Streaming_ChatServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type streamingChatServer struct {
	grpc.ServerStream
}

func (x *streamingChatServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingChatServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Streaming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "subpub.Streaming",
	HandlerType: (*StreamingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _Streaming_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Streaming_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutAll",
			Handler:       _Streaming_PutAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Streaming_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "subpub.proto",
}
